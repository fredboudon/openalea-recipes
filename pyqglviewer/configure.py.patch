--- configure.py	2016-09-28 16:55:28.000000000 +0200
+++ configure.py.conda	2016-09-28 16:58:13.000000000 +0200
@@ -65,10 +65,10 @@
     extra_include_dirs is a list of extra directories to search for headers
     extra_lib_dirs is a list of extra directories to search for libraries
     extra_libs is a list of extra libraries
-    """    
+    """
     makefile = sipconfig.ProgramMakefile(
         configuration, console=True, qt=['QtCore','QtGui','QtOpenGL','QtXml'], opengl=True, warnings=True)
-    
+
     makefile.extra_defines.extend(extra_defines)
     makefile.extra_include_dirs.extend(extra_include_dirs)
     makefile.extra_lib_dirs.extend(extra_lib_dirs)
@@ -81,7 +81,7 @@
         os.remove(exe)
     except OSError:
         pass
-    
+
     if verbose:
         print(build)
     os.system(build)
@@ -96,10 +96,10 @@
 
 # compile_qt_program()
 
-    
+
 def copy_files(sources, directory):
     """Copy a list of files to a directory
-    """ 
+    """
     for source in sources:
         shutil.copy2(source, os.path.join(directory, os.path.basename(source)))
 
@@ -107,8 +107,8 @@
 
 
 def fix_build_file(name, extra_sources, extra_headers, extra_moc_headers):
-    """Extend the targets of a SIP build file with extra files 
-    """    
+    """Extend the targets of a SIP build file with extra files
+    """
     keys = ('target', 'sources', 'headers', 'moc_headers')
     sbf = {}
     for key in keys:
@@ -173,22 +173,22 @@
     if len(sourcelines) != len(targetlines):
         shutil.copy2(source, target)
         return True
-    
-    # skip a SIP time stamp 
+
+    # skip a SIP time stamp
     if (len(sourcelines) > 3
         and sourcelines[3].startswith(' * Generated by SIP')
         ):
         line = 4
     else:
         line = 0
-        
+
     # line by line check
     while line < len(sourcelines):
         if sourcelines[line] != targetlines[line]:
             shutil.copy2(source, target)
             return True
         line = line + 1
-        
+
     return False
 
 
@@ -210,7 +210,7 @@
     """
     version = configuration.sip_version
     version_str = configuration.sip_version_str
-    
+
     print "Found SIP-%s." % version_str
 
     if 0x040500 > version:
@@ -223,11 +223,13 @@
 
 
 def check_qglviewer(configuration, options):
+
     pj = os.path.join
     qglviewer_sources = options.qglviewer_sources
     if qglviewer_sources is None or not os.path.exists(qglviewer_sources):
+        PREFIX = os.environ.get('PREFIX', os.environ.get('CONDA_PREFIX'))
         options.qglviewer_sources = None
-        defaultdir = [pj('/','usr','include'),pj('/','usr','local','include'),pj('/','opt','local','include')]
+        defaultdir = [pj(PREFIX,'include')]
         for ddir in defaultdir:
             if os.path.exists(pj(ddir, "QGLViewer")):
                 qglviewer_sources = ddir
@@ -241,23 +243,23 @@
         QGLVIEWER_VERSION, QGLVIEWER_VERSION_STR = sipconfig.read_version(qglviewer_config, "QGLViewer", "QGLVIEWER_VERSION")
     else:
         raise Die, 'Cannot find libQGLViewer headers. Use option -Q for that.'
-    
+
     if QGLVIEWER_VERSION_STR is None:
         QGLVIEWER_VERSION_STR = str((QGLVIEWER_VERSION & 0xff0000) >> 16)+'.'+str((QGLVIEWER_VERSION & 0x00ff00) >> 8)+'.'+str((QGLVIEWER_VERSION  & 0x0000ff))
-        
+
     options.timelines.append('-t QGLViewer_'+QGLVIEWER_VERSION_STR.replace('.','_'))
     if options.qglviewer_sources:
         print ("Found libQGLViewer-%s in '%s'." % (QGLVIEWER_VERSION_STR, options.qglviewer_sources))
     else:
         print ('Found libQGLViewer-%s.' % QGLVIEWER_VERSION_STR)
- 
+
     return options
 
 
 def setup_qglviewer_build(configuration, options, package):
     """Setup the qglviewer module build
     """
-   
+
     print 'Setup the qglviewer package build.'
 
     build_dir = 'build'
@@ -267,7 +269,7 @@
     extra_headers = []
     extra_moc_headers = []
     extra_py_files = glob.glob(os.path.join('src', 'python', '*.py'))
-               
+
 
     # zap the temporary directory
     try:
@@ -287,7 +289,7 @@
     copy_files(extra_py_files, tmp_dir)
 
     pyqt_sip_flags = configuration.pyqt_sip_flags
-        
+
     # invoke SIP
     cmd = ' '.join(
         [configuration.sip_bin,
@@ -306,7 +308,7 @@
         # SIP assumes POSIX style path separators
         + [options.qglviewer_sipfile.replace('\\', '/')]
         )
-    
+
     if options.verbose_config:
         print 'sip invokation:'
         pprint.pprint(cmd)
@@ -321,7 +323,7 @@
                    [os.path.basename(f) for f in extra_sources],
                    [os.path.basename(f) for f in extra_headers],
                    [os.path.basename(f) for f in extra_moc_headers])
-    
+
 
     # copy lazily to the build directory to speed up recompilation
     if not os.path.exists(build_dir):
@@ -350,9 +352,9 @@
 
     sip_install_dir = os.path.abspath( os.path.join( configuration.pyqt_sip_dir, os.path.pardir, 'QGLViewer'))
     if options.verbose_config:
-        print 'Module installation dir will be :',options.module_install_path 
+        print 'Module installation dir will be :',options.module_install_path
         print 'Sip files installation dir will be :',sip_install_dir
-    # creation of 
+    # creation of
     #if not os.path.exists(sip_install_dir):
     #    try:
     #        os.mkdir(sip_install_dir)
@@ -362,8 +364,8 @@
     sip_files = glob.glob(pattern)
     sip_files = [ os.path.abspath(i) for i in sip_files ]
     installs.append( [sip_files, sip_install_dir])
-        
-    
+
+
     # module makefile
     makefile = sipconfig.SIPModuleMakefile(
             configuration = configuration,
@@ -393,7 +395,7 @@
     """Generate the parent Makefile
     """
     print "Setup the PyQGLViewer build."
-     
+
     sipconfig.ParentMakefile(configuration = configuration,
                              subdirs = options.subdirs).generate()
 
@@ -418,6 +420,8 @@
     else:
         defaultinstallpathes = [ '/usr/local/include', '/opt/local/include', '/usr/include']
 
+    PREFIX = os.environ.get('PREFIX', os.environ.get('CONDA_PREFIX'))
+    defaultinstallpathes = [os.path.join(PREFIX,'include')]
     for installpath in defaultinstallpathes:
         if os.path.exists(installpath) and os.path.exists(os.path.join(installpath, 'QGLViewer')):
             defaultinstallpath = installpath
@@ -511,7 +515,7 @@
         help=('enable trace of the execution of the bindings'
               ' [default disabled]'))
     parser.add_option_group(sip_options)
-    
+
     install_options = optparse.OptionGroup(parser, 'Install options')
     install_options.add_option(
         '--module-install-path', default='', action='store',
@@ -520,13 +524,13 @@
     parser.add_option_group(install_options)
 
     options, args =  parser.parse_args()
-    
+
     # tweak some of the options to facilitate later processing
     if options.jobs < 1:
         options.jobs = ''
     else:
         options.jobs = '-j %s' % options.jobs
-        
+
     options.excluded_features = [
         ('-x %s' % f) for f in options.excluded_features
         ]
@@ -535,7 +539,7 @@
     options.sip_include_dirs = [
         ('-I %s' % f).replace('\\', '/') for f in options.sip_include_dirs
     ]
-    
+
     options.timelines = [
         ('-t %s' % t) for t in options.timelines
         ]
@@ -544,17 +548,17 @@
         options.trace = '-r'
     else:
         options.trace = ''
-     
+
     if options.force_import_glteximage3d:
-        options.extra_defines.extend(['GL_TEXTURE_3D_NO_DEFAULT_DEFINITION'])        
-    
+        options.extra_defines.extend(['GL_TEXTURE_3D_NO_DEFAULT_DEFINITION'])
+
     options.subdirs = ['build']
-    
+
     options.qglviewer_sipfile = os.path.join('src','sip','QGLViewerModule.sip')
-    
-    if sys.platform == 'win32':       
+
+    if sys.platform == 'win32':
        options.extra_libs.append('QGLViewer2')
-       
+
     elif sys.platform == 'darwin':
         if options.framework:
             if len(options.framework) > 0:
@@ -564,13 +568,13 @@
             if len(options.framework) > 0:
                 options.qglviewer_sources = options.framework[0]+'/QGLViewer.framework/Headers'
                 options.extra_lflags.append("-framework QGLViewer")
-        else:        
+        else:
             options.extra_libs.append('QGLViewer')
     else:
        options.extra_libs.append('QGLViewer')
 
     if options.qglviewer_sources:
-        options.qglviewer_sources = os.path.abspath(options.qglviewer_sources)        
+        options.qglviewer_sources = os.path.abspath(options.qglviewer_sources)
         options.extra_include_dirs.append(options.qglviewer_sources)
 
         qgl_lib_dir = os.path.abspath(os.path.join(options.qglviewer_sources,os.pardir,'lib'))
@@ -580,12 +584,12 @@
             qgl_lib_dir = os.path.join(options.qglviewer_sources,'QGLViewer')
             if os.path.exists(qgl_lib_dir):
                 options.extra_lib_dirs.append(qgl_lib_dir)
-        
-            if sys.platform == 'win32':       
+
+            if sys.platform == 'win32':
                 qgl_release_lib_dir= os.path.join(qgl_lib_dir,'release')
                 options.extra_lib_dirs.append(qgl_release_lib_dir)
 
-        
+
     return options, args
 
 
@@ -600,7 +604,7 @@
         print
 
     configuration = get_pyqt_configuration(options)
-    
+
     options = check_sip(configuration, options)
     options = check_os(configuration, options)
     options = check_qglviewer(configuration, options)
@@ -638,7 +642,7 @@
                 )
             traceback.print_exc()
             sys.exit(1)
-        
+
 # Local Variables: ***
 # mode: python ***
 # End: ***
